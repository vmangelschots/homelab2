---
apiVersion: v1
kind: Namespace
metadata:
  name: sabnzbd


---
# Persistent volumes (NFS by default per your cluster)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sabnzbd-config
  namespace: sabnzbd
spec:
  accessModes: ["ReadWriteMany"]
  storageClassName: nfs-retain
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sabnzbd-downloads
  namespace: sabnzbd
spec:
  accessModes: ["ReadWriteMany"]
  storageClassName: nfs-delete
  resources:
    requests:
      storage: 200Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sabnzbd
  namespace: sabnzbd
  labels:
    app.kubernetes.io/name: sabnzbd
    app.kubernetes.io/instance: sabnzbd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sabnzbd
      app.kubernetes.io/instance: sabnzbd
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sabnzbd
        app.kubernetes.io/instance: sabnzbd
    spec:
      # Uncomment to pin to a node (e.g., downloads box)
      # nodeSelector:
      #   kubernetes.io/hostname: argus
      securityContext:
        fsGroup: 65534 
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: sabnzbd
          image: lscr.io/linuxserver/sabnzbd:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: PUID
              value: "65534"
            - name: PGID
              value: "65534"
            - name: TZ
              value: "Europe/Brussels"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /config
            - name: downloads
              mountPath: /downloads
          # Basic health checks (SABnzbd UI responds on "/")
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 3
            failureThreshold: 6
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: "2"
              memory: 2Gi
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: sabnzbd-config
        - name: downloads
          persistentVolumeClaim:
            claimName: sabnzbd-downloads

---
apiVersion: v1
kind: Service
metadata:
  name: sabnzbd
  namespace: sabnzbd
  labels:
    app.kubernetes.io/name: sabnzbd
    app.kubernetes.io/instance: sabnzbd
spec:
  selector:
    app.kubernetes.io/name: sabnzbd
    app.kubernetes.io/instance: sabnzbd
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: http

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sabnzbd
  namespace: sabnzbd
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-dns01
    # Attach your existing middleware (replace NAMESPACE if needed)
    traefik.ingress.kubernetes.io/router.middlewares: default-internal-whitelist@kubernetescrd
spec:
  ingressClassName: traefik   # <- adjust or drop if your class has a different name/defaults
  tls:
    - hosts:
        - sabnzbd.mangelschots.org
      secretName: sabnzbd-mangelschots-org-tls
  rules:
    - host: sabnzbd.mangelschots.org
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: sabnzbd
                port:
                  number: 8080
---
# Prometheus exporter
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sabnzbd-exporter
  namespace: sabnzbd
  labels:
    app.kubernetes.io/name: sabnzbd-exporter
    app.kubernetes.io/instance: sabnzbd-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sabnzbd-exporter
      app.kubernetes.io/instance: sabnzbd-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sabnzbd-exporter
        app.kubernetes.io/instance: sabnzbd-exporter
    spec:
      containers:
        - name: exporter
          image: msroest/sabnzbd_exporter:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: SABNZBD_BASEURLS
              value: "http://sabnzbd.sabnzbd.svc.cluster.local:8080"
            - name: SABNZBD_APIKEYS
              valueFrom:
                secretKeyRef:
                  name: sabnzbd-secrets
                  key: api
          ports:
            - name: metrics
              containerPort: 9387
              protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: sabnzbd-exporter
  namespace: sabnzbd
  labels:
    app.kubernetes.io/name: sabnzbd-exporter
    app.kubernetes.io/instance: sabnzbd-exporter
spec:
  selector:
    app.kubernetes.io/name: sabnzbd-exporter
    app.kubernetes.io/instance: sabnzbd-exporter
  ports:
    - name: metrics
      protocol: TCP
      port: 9387
      targetPort: metrics

---

