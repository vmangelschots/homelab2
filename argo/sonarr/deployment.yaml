---
apiVersion: v1
kind: Namespace
metadata:
  name: sonarr

---
# Sonarr CONFIG (same pattern as sabnzbd-config PVC; uses your nfs-retain class)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarr-config
  namespace: sonarr
spec:
  accessModes: ["ReadWriteMany"]
  storageClassName: nfs-retain
  resources:
    requests:
      storage: 1Gi

---
# Sonarr DOWNLOADS: its own PV (points to the same NFS export as SAB, but unique PV)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: downloads-nfs-pv-sonarr
  labels:
    app: sonarr
    pv-role: downloads
spec:
  capacity:
    storage: 2Ti
  accessModes: ["ReadWriteMany"]
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs-static
  mountOptions:
    - nfsvers=4.1
    - rsize=1048576
    - wsize=1048576
    - hard
    - timeo=600
    - retrans=2
    - noatime
  nfs:
    server: 192.168.30.4
    path: /mnt/large_pool/downloads

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarr-downloads
  namespace: sonarr
spec:
  accessModes: ["ReadWriteMany"]
  resources:
    requests:
      storage: 2Ti
  storageClassName: nfs-static
  selector:
    matchLabels:
      app: sonarr
      pv-role: downloads

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: series-nfs-pv-sonarr
  labels:
    app: sonarr
    pv-role: series
spec:
  capacity:
    storage: 2Ti
  accessModes: ["ReadWriteMany"]
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs-static
  mountOptions:
    - nfsvers=4.1
    - rsize=1048576
    - wsize=1048576
    - hard
    - timeo=600
    - retrans=2
    - noatime
  nfs:
    server: 192.168.30.4
    path: /mnt/large_pool/series

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarr-series
  namespace: sonarr
spec:
  accessModes: ["ReadWriteMany"]
  resources:
    requests:
      storage: 2Ti
  storageClassName: nfs-static
  selector:
    matchLabels:
      app: sonarr
      pv-role: series

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  namespace: sonarr
  labels:
    app.kubernetes.io/name: sonarr
    app.kubernetes.io/instance: sonarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sonarr
      app.kubernetes.io/instance: sonarr
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sonarr
        app.kubernetes.io/instance: sonarr
    spec:
      securityContext:
        fsGroup: 65534
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: sonarr
          image: lscr.io/linuxserver/sonarr:latest
          imagePullPolicy: IfNotPresent
          env:
            - { name: PUID, value: "65534" }
            - { name: PGID, value: "65534" }
            - { name: TZ,   value: "Europe/Brussels" }
          ports:
            - { name: http, containerPort: 8989, protocol: TCP }
          volumeMounts:
            - { name: config,    mountPath: /config }
            - { name: series,    mountPath: /data/series }
            - { name: downloads, mountPath: /data/downloads }
          readinessProbe:
            httpGet: { path: /, port: http }
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 6
          livenessProbe:
            httpGet: { path: /, port: http }
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 3
            failureThreshold: 6
          resources:
            requests: { cpu: 100m, memory: 256Mi }
            limits:   { cpu: "2",  memory: 2Gi }
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: sonarr-config
        - name: series
          persistentVolumeClaim:
            claimName: sonarr-series
        - name: downloads
          persistentVolumeClaim:
            claimName: sonarr-downloads

---
apiVersion: v1
kind: Service
metadata:
  name: sonarr
  namespace: sonarr
  labels:
    app.kubernetes.io/name: sonarr
    app.kubernetes.io/instance: sonarr
spec:
  selector:
    app.kubernetes.io/name: sonarr
    app.kubernetes.io/instance: sonarr
  ports:
    - name: http
      protocol: TCP
      port: 8989
      targetPort: http

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarr
  namespace: sonarr
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-dns01
    traefik.ingress.kubernetes.io/router.middlewares: default-internal-whitelist@kubernetescrd
spec:
  ingressClassName: traefik
  tls:
    - hosts: [sonarr.mangelschots.org]
      secretName: sonarr-mangelschots-org-tls
  rules:
    - host: sonarr.mangelschots.org
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: sonarr
                port:
                  number: 8989

---
# Sonarr Prometheus exporter (exportarr)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr-exporter
  namespace: sonarr
  labels:
    app.kubernetes.io/name: sonarr-exporter
    app.kubernetes.io/instance: sonarr-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sonarr-exporter
      app.kubernetes.io/instance: sonarr-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sonarr-exporter
        app.kubernetes.io/instance: sonarr-exporter
    spec:
      containers:
        - name: exporter
          image: ghcr.io/onedr0p/exportarr:v2.0.1
          args: ["sonarr"]
          env:
            - name: URL
              value: "http://sonarr:8989"
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: sonarr-api-key
                  key: api_key
            - name: PORT
              value: "9707"
          ports:
            - { name: metrics, containerPort: 9707, protocol: TCP }

---
apiVersion: v1
kind: Service
metadata:
  name: sonarr-exporter
  namespace: sonarr
  labels:
    app.kubernetes.io/name: sonarr-exporter
    app.kubernetes.io/instance: sonarr-exporter
spec:
  selector:
    app.kubernetes.io/name: sonarr-exporter
    app.kubernetes.io/instance: sonarr-exporter
  ports:
    - name: metrics
      protocol: TCP
      port: 9707
      targetPort: metrics

